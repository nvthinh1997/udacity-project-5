version: 2.1

jobs:
  test-build:
    docker:
      - image: python:3.7.3-stretch

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      # run build
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install

      # run lint
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

  upload-docker:
    docker:
      - image: circleci/golang:1.15

    working_directory: ~/repo

    steps:
      - checkout

      - setup_remote_docker:
          version: 19.03.13

      - run:
          name: Build docker container
          command: |
            docker build --tag=$DOCKER_IMAGE_NAME .
            docker image ls

      - run:
          name: Upload Docker to Dockerhub
          command: |
            echo "Docker ID and Image: $DOCKER_IMAGE_NAME"
            docker login -u="$DOCKERHUB_USERNAME" -p="$DOCKERHUB_PASSWORD"
            docker tag $DOCKER_IMAGE_NAME $DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:$CIRCLE_WORKFLOW_ID
            docker push $DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:$CIRCLE_WORKFLOW_ID

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Ensure EKS network exists
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/network.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-network" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://cloudformation/network-parameter.json
      - run:
          name: Ensure EKS Cluster exists
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/cluster.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-cluster" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://cloudformation/cluster-parameter.json \
              --capabilities CAPABILITY_NAMED_IAM
          no_output_timeout: 15m
      - run:
          name: Ensure Nodegroup exists
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/nodegroup.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-nodegroup" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://cloudformation/nodegroup-parameter.json \
              --capabilities CAPABILITY_NAMED_IAM
      - run:
          name: Ensure controller instances exists
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/controller.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-controller" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://cloudformation/controller-parameter.json \
              --output text >> ~/checkIfDeployed.txt
            cat ~/checkIfDeployed.txt
      - run:
          name: Extract the IPs of the controller instances for Ansible
          command: |
            echo [controller] > ~/inventory.txt
            aws ec2 describe-instances \
              --region "${AWS_DEFAULT_REGION}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=${ENVIRONMENT_NAME}-controller*" \
              --output text >> ~/inventory.txt
            cat ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
            - checkIfDeployed.txt

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
      - add_ssh_keys:
          fingerprints: ["e5:eb:64:ea:68:13:13:56:1a:3a:58:bb:23:18:40:54:c4:26:ad:bf"]
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            if grep -q "No changes to deploy" ~/checkIfDeployed.txt
                then
                  cat ~/inventory.txt
                  echo "Our management instances are already configured."
                else
                  cat ~/inventory.txt
                  cd .ssh
                  eval `ssh-agent`
                  chmod 400 capstone.pem
                  ssh-add capstone.pem 
                  cd ..
                  cd ansible
                  ansible-playbook -i ~/inventory.txt -u ubuntu --private-key ./.ssh/capstone.pem config-sever.yml -vvv
                fi

  configure-cluster:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["e5:eb:64:ea:68:13:13:56:1a:3a:58:bb:23:18:40:54:c4:26:ad:bf"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
      - run:
          name: Configure server
          command: |
            if grep -q "No changes to deploy" ~/checkIfDeployed.txt
              then
                cat ~/inventory.txt
                echo "Our management instances are already configured."
              else
                cd .ssh
                eval `ssh-agent`
                chmod 400 capstone.pem
                ssh-add capstone.pem 
                cd ..
                cd ansible
                ansible-playbook -i ~/inventory.txt configure-cluster.yml -vvv
              fi
      - run:
          name: Wait for LoadBalancer's domain to become reachable
          command: |
            if grep -q "No changes to deploy" ~/checkIfDeployed.txt
              then
                cat ~/inventory.txt
                echo "Our controller instances are already configured."
              else
                cat ~/inventory.txt
                echo "Wait 60 seconds..."
                sleep 60
              fi
      - run:
          name: Display the LoadBalancer's DNS name
          command: |
            cat ~/inventory.txt
            cd .ssh
            eval `ssh-agent`
            chmod 400 capstone.pem
            ssh-add capstone.pem 
            cd ..
            cd ansible
            ansible-playbook -i ~/inventory.txt -u ubuntu --private-key ./.ssh/capstone.pem elb-dns.yml -vvv
            cat > ~/elb_dns.txt
            cat ~/elb_dns.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - elb_dns.txt

  deploy-docker:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["e5:eb:64:ea:68:13:13:56:1a:3a:58:bb:23:18:40:54:c4:26:ad:bf"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
      - run:
          name: Deploy newest Docker Image
          command: |
            cat ~/inventory.txt
            cd .ssh
            eval `ssh-agent`
            chmod 400 capstone.pem
            ssh-add capstone.pem 
            cd ..
            cd ansible
            ansible-playbook -i ~/inventory.txt deploy-app.yml -vvv
          no_output_timeout: 2m

workflows:
  default:
    jobs:
      - test-build
      - upload-docker:
          requires:
            - test-build
          filters:
            branches:
              only: [ master ]
      - deploy-infrastructure:
          filters:
            branches:
              only: [ master ]
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - configure-cluster:
          requires:
            - configure-infrastructure
            - upload-docker
      - deploy-docker:
          requires:
            - configure-cluster